{
  "version": 3,
  "sources": ["../package.json", "../src/lib/log.ts", "../src/lib/git.ts", "../src/lib/workspaceConfig.ts", "../src/lib/addRepo.ts", "../src/commands/addRepoCommand.ts", "../src/lib/createWorkspace.ts", "../src/commands/createCommand.ts", "../src/lib/initRepos.ts", "../src/commands/initCommand.ts", "../src/lib/removeRepo.ts", "../src/commands/removeRepoCommand.ts", "../src/commands/updateCommand.ts", "../src/bin/mws.ts"],
  "sourcesContent": ["{\n  \"name\": \"@co2-lab/mws\",\n  \"version\": \"1.0.0\",\n  \"repository\": \"https://github.com/co2-lab/mws.git\",\n  \"author\": \"Codeco <adrielcodeco@hotmail.com>\",\n  \"license\": \"MIT\",\n  \"bin\": {\n    \"mws\": \"bin/mws\"\n  },\n  \"imports\": {\n    \"#src/*\": \"./dist/*\"\n  },\n  \"scripts\": {\n    \"build\": \"node esbuild.js\",\n    \"typecheck\": \"tsc\",\n    \"yarn:pack\": \"yarn pack && cpy 'onhand-*.tgz' '../../releases'\"\n  },\n  \"dependencies\": {\n    \"octokit\": \"^2.0.14\",\n    \"prompts\": \"^2.4.2\",\n    \"simple-git\": \"^3.17.0\",\n    \"yargs\": \"^17.7.1\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.15.11\",\n    \"@types/yargs\": \"^17.0.24\",\n    \"esbuild\": \"^0.17.15\",\n    \"typescript\": \"^5.0.3\"\n  }\n}\n", "export const logIfPermitted = (verbose: boolean) => {\n  return verbose ? console.log : (...data: any[]) => undefined\n}\n", "import simpleGit, { SimpleGit } from 'simple-git'\nimport { Octokit } from 'octokit'\nimport { logIfPermitted } from '#src/lib/log'\n\nexport const checkAccess = async (personalAccessToken: string, verbose: boolean) => {\n  const log = logIfPermitted(verbose)\n  try {\n    const octokit = new Octokit({ auth: personalAccessToken })\n    const {\n      data: { login },\n    } = await octokit.rest.users.getAuthenticated()\n    return login\n  } catch (err) {\n    log(err)\n    return ''\n  }\n}\n\nexport const createRepo = async (\n  personalAccessToken: string,\n  repoName: string,\n  privateRepo: boolean,\n  githubLogin: string,\n  verbose: boolean,\n) => {\n  const log = logIfPermitted(verbose)\n  try {\n    const octokit = new Octokit({ auth: personalAccessToken })\n    const response = await octokit.rest.repos.createUsingTemplate({\n      template_owner: 'co2lab',\n      template_repo: 'onhand-repo-template',\n      name: repoName,\n      owner: githubLogin,\n      private: privateRepo,\n    })\n    return response.data\n  } catch (err) {\n    log(err)\n    throw 'This repo name is invalid or is already in use, try another.'\n  }\n}\n\nexport const initRepo = async (cwd: string, repoUrl: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.init().addRemote('origin', repoUrl)\n}\n\nexport const pull = async (cwd: string, branch: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.pull('origin', branch)\n}\n\nexport const commitChanges = async (cwd: string, commitMessage: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.add('./*').commit(commitMessage)\n}\n\nexport const pushToRemote = async (cwd: string, branch: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.push(['-u', 'origin', `HEAD:${branch}`])\n}\n\nexport const status = (cwd: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.status()\n}\n\nexport const clone = (cwd: string, gitUrl: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.clone(gitUrl)\n}\n\nexport const switchAndCreateBranchIfNotExists = async (cwd: string, branch: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.raw(['switch', branch]).catch(() => git.raw(['switch', '-c', branch]))\n}\n\nexport const checkoutBranch = (cwd: string, branch: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.checkout(['-t', `origin/${branch}`])\n}\n\nexport const checkoutTag = (cwd: string, tag: string) => {\n  const git: SimpleGit = simpleGit(cwd)\n  return git.checkout([`tags/${tag}`, '-b', tag])\n}\n", "import fs from 'fs'\nimport path from 'path'\n\nexport interface RepoConfig {\n  folder: string\n  repo: string\n  branch?: string\n  tag?: string\n  [key: string]:\n    | {\n        branch?: string\n        tag?: string\n      }\n    | any\n}\n\nexport interface WorkspaceConfig {\n  workspaceName: string\n  repositoriesFolder: string\n  repositories?: RepoConfig[]\n}\n\nconst getConfigPath = (createIfNotExists = false, cwd = process.cwd()) => {\n  const configPath = path.resolve(cwd, 'onhand.workspace.json')\n  if (!fs.existsSync(configPath)) {\n    if (createIfNotExists) {\n      fs.writeFileSync(configPath, '', { encoding: 'utf-8' })\n    } else {\n      throw new Error('onhand.workspace.json not found')\n    }\n  }\n  return configPath\n}\n\nexport const loadWorkspaceConfig = (): WorkspaceConfig => {\n  const configPath = getConfigPath()\n  const json = fs.readFileSync(configPath, { encoding: 'utf-8' })\n  const config = JSON.parse(json) as WorkspaceConfig\n  return config\n}\n\nexport const setWorkspaceConfig = (config: WorkspaceConfig, cwd = process.cwd()) => {\n  const configPath = getConfigPath(true, cwd)\n  fs.writeFileSync(configPath, JSON.stringify(config), { encoding: 'utf-8' })\n}\n\nexport const addRepoToWorkspace = (repo: RepoConfig) => {\n  const configPath = getConfigPath()\n  const json = fs.readFileSync(configPath, { encoding: 'utf-8' })\n  const config = JSON.parse(json) as WorkspaceConfig\n  config.repositories?.push(repo)\n  fs.writeFileSync(configPath, JSON.stringify(config), { encoding: 'utf-8' })\n}\n\nexport const removeRepoToWorkspace = (repoFolder: string) => {\n  const configPath = getConfigPath()\n  const json = fs.readFileSync(configPath, { encoding: 'utf-8' })\n  const config = JSON.parse(json) as WorkspaceConfig\n  config.repositories = config.repositories?.filter(r => r.folder !== repoFolder)\n  fs.writeFileSync(configPath, JSON.stringify(config), { encoding: 'utf-8' })\n}\n", "import path from 'path'\nimport { logIfPermitted } from '#src/lib/log'\nimport * as git from '#src/lib/git'\nimport { loadWorkspaceConfig, addRepoToWorkspace, RepoConfig } from '#src/lib/workspaceConfig'\n\ntype addRepoOptions = {\n  gitUrl: string\n  folderName: string\n  connection: string\n  connectedTo: string\n  verbose: boolean\n}\n\nexport const addRepo = async (options: addRepoOptions) => {\n  const { gitUrl, folderName, connection, connectedTo, verbose } = options\n  const { repositoriesFolder } = loadWorkspaceConfig()\n  let cwd = path.resolve(process.cwd(), repositoriesFolder)\n  const log = logIfPermitted(verbose)\n  log('Starting to add a repo...')\n  await git.clone(cwd, gitUrl)\n  cwd = path.resolve(cwd, folderName)\n  const repoProperties: RepoConfig = {\n    folder: folderName,\n    repo: gitUrl,\n  }\n  const { tracking } = await git.status(cwd)\n  if (connection === 'branch') {\n    if (tracking === `origin/${connectedTo}`) {\n      await git.pull(cwd, connectedTo)\n    } else {\n      await git.checkoutBranch(cwd, connectedTo)\n    }\n    repoProperties.branch = connectedTo\n  } else {\n    await git.checkoutTag(cwd, connectedTo)\n    repoProperties.tag = connectedTo\n  }\n  addRepoToWorkspace(repoProperties)\n}\n", "import prompts from 'prompts'\nimport { addRepo } from '#src/lib/addRepo'\n\nexport const command = 'add-repo'\nexport const desc = 'Add a repository to workspace'\nexport const builder = function (yargs) {}\n\nexport const handler = function (argv) {\n  ;(async () => {\n    await addRepoCommand({ verbose: !!argv.verbose })\n  })().catch(err => {\n    console.error(err)\n    process.exit(1)\n  })\n}\n\nasync function addRepoCommand(options: { verbose: boolean }) {\n  const defaults = {}\n  const answers = await prompts([\n    {\n      type: 'text',\n      name: 'gitUrl',\n      message: 'What is the git url of the repo that you want to clone ?',\n    },\n    {\n      type: 'text',\n      name: 'folderName',\n      message: 'What should be the folder name where it should be cloned ?',\n      initial: (prev, values, prompt) => {\n        const parts = prev.split('/')\n        return parts[parts.length - 1].replace(/\\.git$/, '')\n      },\n    },\n    {\n      type: 'select',\n      name: 'connection',\n      message: 'Connect to ... ?',\n      choices: [\n        {\n          title: 'Branch',\n          description: 'Connected to the branch',\n          value: 'branch',\n        },\n        { title: 'Tag', description: 'Connected to the tag', value: 'tag' },\n      ],\n      initial: 0,\n    },\n    {\n      type: 'text',\n      name: 'connectedTo',\n      message: 'pull from ... ?',\n      initial: (prev, values, prompt) => {\n        switch (prev) {\n          case 'branch':\n            return 'main'\n          case 'tag':\n            return 'v1.0.0'\n          default:\n            return ''\n        }\n      },\n    },\n  ])\n  const fullOptions = Object.assign({}, defaults, options, answers)\n  if (!fullOptions.gitUrl) {\n    throw new Error('The git url is required')\n  }\n  if (!fullOptions.connection || !fullOptions.connectedTo) {\n    throw new Error('invalid repo connection')\n  }\n  await addRepo(fullOptions)\n}\n", "import path from 'path'\nimport { logIfPermitted } from '#src/lib/log'\n// import { generate } from '#src/lib/generators'\nimport * as git from '#src/lib/git'\nimport { setWorkspaceConfig } from '#src/lib/workspaceConfig'\n\ntype createWorkspaceOptions = {\n  workspaceName: string\n  repositoriesFolder: string\n  pushToGit: boolean\n  githubAccessToken: string\n  githubProjectName: string\n  githubDefaultBranchName: string\n  githubPrivateRepo: boolean\n  githubLogin: string\n  verbose: boolean\n}\n\nexport const createWorkspace = async (options: createWorkspaceOptions) => {\n  const {\n    workspaceName,\n    repositoriesFolder,\n    pushToGit,\n    githubAccessToken,\n    githubProjectName,\n    githubDefaultBranchName,\n    githubPrivateRepo,\n    githubLogin,\n    verbose,\n  } = options\n  const cwd = process.cwd()\n  const projCwd = path.resolve(cwd, workspaceName)\n  const log = logIfPermitted(verbose)\n  log('Starting workspace creation...')\n  let repoUrl = ''\n  if (pushToGit) {\n    log('Creating github repo...')\n    const { clone_url: cloneUrl } = await git.createRepo(\n      githubAccessToken,\n      githubProjectName,\n      githubPrivateRepo,\n      githubLogin,\n      verbose,\n    )\n    repoUrl = cloneUrl\n  }\n  // await generate({\n  //   cwd,\n  //   workspaceConfig: { workspaceName, repositoriesFolder },\n  // })\n  await setWorkspaceConfig(\n    {\n      workspaceName,\n      repositoriesFolder,\n      repositories: [],\n    },\n    projCwd,\n  )\n  if (pushToGit) {\n    await git.initRepo(projCwd, repoUrl)\n    await git.pull(projCwd, githubDefaultBranchName)\n    await git.commitChanges(projCwd, 'chore: Initializing the workspace')\n    await git.pushToRemote(projCwd, githubDefaultBranchName)\n  }\n}\n", "import prompts from 'prompts'\nimport { checkAccess } from '#src/lib/git'\nimport { createWorkspace } from '#src/lib/createWorkspace'\n\nexport const command = 'create'\nexport const desc = 'Create workspace'\nexport const builder = function (yargs) {}\n\nexport const handler = function (argv) {\n  ;(async () => {\n    await createCommand({ verbose: !!argv.verbose })\n  })().catch(err => {\n    console.error(err)\n    process.exit(1)\n  })\n}\n\nasync function createCommand(options: { verbose: boolean }) {\n  const { verbose } = options\n  const defaults = {\n    workspaceFolder: '.',\n    workspaceName: 'workspace',\n    repositoriesFolder: 'repositories',\n    githubLogin: '',\n    githubDefaultBranchName: 'main',\n  }\n  const answers = await prompts(\n    [\n      {\n        type: 'text',\n        name: 'workspaceFolder',\n        message: 'Where is the workspace folder ?',\n        onRender: kleur => {\n          this.msg = kleur.cyan('relative or absolute path default: \".\"')\n        },\n        initial: defaults.workspaceFolder,\n      },\n      {\n        type: 'text',\n        name: 'workspaceName',\n        message: 'What will be the workspace name ?',\n        initial: defaults.workspaceName,\n      },\n      {\n        type: 'text',\n        name: 'repositoriesFolder',\n        message: 'What will be the name of the repositories folder ?',\n        initial: defaults.repositoriesFolder,\n      },\n      {\n        type: 'confirm',\n        name: 'pushToGit',\n        message: 'Do you want to push it to github ?',\n        initial: true,\n      },\n      {\n        type: prev => (prev === true ? 'password' : null),\n        name: 'githubAccessToken',\n        message: 'What Github Personal Access Token can I use ?',\n        validate: async value => {\n          const login = await checkAccess(value, verbose)\n          defaults.githubLogin = login\n          return !!login\n        },\n        error: 'Invalid Github Personal Access Token',\n      },\n      {\n        type: prev => (prev ? 'text' : null),\n        name: 'githubProjectName',\n        message: 'What will be the Github project name ?',\n        initial: (prev, values, prompt) => {\n          return values.workspaceName\n        },\n      },\n      // {\n      //   type: prev => (prev ? 'text' : null),\n      //   name: 'githubDefaultBranchName',\n      //   message: 'What will be the default branch name ?',\n      //   initial: defaults.githubDefaultBranchName,\n      // },\n      {\n        type: prev => (prev ? 'confirm' : null),\n        name: 'githubPrivateRepo',\n        message: 'Do you want to make the repo private ?',\n        initial: true,\n      },\n    ],\n    {\n      onCancel: () => {\n        console.log('canceled by user')\n        process.exit(1)\n      },\n    },\n  )\n  const fullOptions = Object.assign({}, defaults, options, answers)\n  if (!fullOptions.workspaceName) {\n    throw new Error('The workspace name is required')\n  }\n  if (!fullOptions.repositoriesFolder) {\n    throw new Error('The name of the repositories folder is required')\n  }\n  await createWorkspace(fullOptions)\n}\n", "import fs from 'fs'\nimport path from 'path'\nimport * as git from '#src/lib/git'\nimport { loadWorkspaceConfig } from '#src/lib/workspaceConfig'\n\ntype initReposOptions = {\n  verbose: boolean\n}\n\nexport const initRepos = async (options: initReposOptions) => {\n  const cwd = process.cwd()\n  const config = loadWorkspaceConfig()\n  for (const repository of config.repositories ?? []) {\n    const repositoriesFolderPath = path.resolve(cwd, config.repositoriesFolder)\n    const repoPath = path.resolve(repositoriesFolderPath, repository.folder)\n    if (!fs.existsSync(repoPath)) {\n      await git.clone(repositoriesFolderPath, repository.repo)\n    }\n    if (repository.branch) {\n      await git.switchAndCreateBranchIfNotExists(repoPath, repository.branch)\n      await git.pull(repoPath, repository.branch)\n    }\n    if (repository.tag) {\n      await git.checkoutTag(repoPath, repository.tag)\n      await git.pull(repoPath, repository.tag)\n    }\n  }\n}\n", "import { initRepos } from '#src/lib/initRepos'\n\nexport const command = 'init'\nexport const desc = 'Init repositories from git'\nexport const builder = function (yargs) {}\n\nexport const handler = function (argv) {\n  ;(async () => {\n    await initCommand({ verbose: !!argv.verbose })\n  })().catch(err => {\n    console.error(err)\n    process.exit(1)\n  })\n}\n\nasync function initCommand(options: { verbose: boolean }) {\n  await initRepos(options)\n}\n", "import fs from 'fs'\nimport path from 'path'\nimport { logIfPermitted } from '#src/lib/log'\nimport { loadWorkspaceConfig, removeRepoToWorkspace } from '#src/lib/workspaceConfig'\n\ntype removeRepoOptions = {\n  repoFolder: string\n  confirmIgnoreChanges: boolean\n  verbose: boolean\n}\n\nexport const removeRepo = async (options: removeRepoOptions) => {\n  const { repoFolder, verbose } = options\n  const cwd = process.cwd()\n  const { repositoriesFolder } = loadWorkspaceConfig()\n  const log = logIfPermitted(verbose)\n  log('Starting to remove a repo...')\n  const folder = path.resolve(cwd, repositoriesFolder, repoFolder)\n  fs.rmSync(folder, { recursive: true, force: true })\n  removeRepoToWorkspace(repoFolder)\n}\n", "import path from 'path'\nimport prompts from 'prompts'\nimport { removeRepo } from '#src/lib/removeRepo'\nimport { loadWorkspaceConfig } from '#src/lib/workspaceConfig'\nimport { status } from '#src/lib/git'\n\nexport const command = 'remove-repo'\nexport const desc = 'Remove a repository from workspace'\nexport const builder = function (yargs) {}\n\nexport const handler = function (argv) {\n  ;(async () => {\n    await removeRepoCommand({ verbose: !!argv.verbose })\n  })().catch(err => {\n    console.error(err)\n    process.exit(1)\n  })\n}\n\nasync function removeRepoCommand(options: { verbose: boolean }) {\n  const config = loadWorkspaceConfig()\n  const defaults = { hasChanges: false }\n  const answers = await prompts([\n    {\n      type: 'select',\n      name: 'repoFolder',\n      message: 'Which folder do you want to remove ?',\n      choices: (config.repositories ?? []).map(repo => {\n        return {\n          title: repo.folder,\n          description: repo.repo,\n          value: repo.folder,\n        }\n      }),\n      validate: async value => {\n        try {\n          const cwd = path.resolve(process.cwd(), config.repositoriesFolder, value)\n          const response = await status(cwd)\n          defaults.hasChanges = !response.isClean()\n        } catch (err) {\n          console.error(err)\n        }\n        return true\n      },\n    },\n    {\n      type: () => (defaults.hasChanges ? 'confirm' : null),\n      name: 'confirmIgnoreChanges',\n      message: 'This repo has changes, do you want to ignore them ?',\n      initial: false,\n    },\n  ])\n  const fullOptions = Object.assign({}, defaults, options, answers)\n  if (!fullOptions.repoFolder) {\n    throw new Error('Invalid repo.')\n  }\n  if (defaults.hasChanges && !fullOptions.confirmIgnoreChanges) {\n    return\n  }\n  await removeRepo(fullOptions)\n}\n", "export const command = 'update'\nexport const desc = 'Update repositories from git'\nexport const builder = function (yargs) {}\n\nexport const handler = function (argv) {\n  ;(async () => {\n    await updateCommand({ verbose: !!argv.verbose })\n  })().catch(err => {\n    console.error(err)\n    process.exit(1)\n  })\n}\n\nexport async function updateCommand(options: { verbose: boolean }) {\n  console.log(options)\n}\n", "#!/usr/bin/env node\n\nconst packageJson = require('../../package.json')\n\nrequire('yargs/yargs')(process.argv.slice(2))\n  .usage('Usage: mws COMMAND')\n  .option('verbose', {\n    alias: 'v',\n    type: 'boolean',\n    description: 'false',\n  })\n  .command(require('../commands/addRepoCommand'))\n  .command(require('../commands/createCommand'))\n  .command(require('../commands/initCommand'))\n  .command(require('../commands/removeRepoCommand'))\n  .command(require('../commands/updateCommand'))\n  .version(packageJson.version)\n  .demandCommand(1, '') // just print help\n  .recommendCommands()\n  .help()\n  .alias('h', 'help').argv\n"],
  "mappings": "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",
  "names": ["require_package", "__commonJSMin", "exports", "module", "logIfPermitted", "init_log", "__esmMin", "verbose", "data", "import_simple_git", "import_octokit", "checkAccess", "createRepo", "initRepo", "pull", "commitChanges", "pushToRemote", "status", "clone", "switchAndCreateBranchIfNotExists", "checkoutBranch", "checkoutTag", "init_git", "__esmMin", "init_log", "personalAccessToken", "verbose", "log", "logIfPermitted", "octokit", "login", "err", "repoName", "privateRepo", "githubLogin", "cwd", "repoUrl", "simpleGit", "branch", "commitMessage", "gitUrl", "git", "tag", "import_fs", "import_path", "getConfigPath", "loadWorkspaceConfig", "setWorkspaceConfig", "addRepoToWorkspace", "removeRepoToWorkspace", "init_workspaceConfig", "__esmMin", "createIfNotExists", "cwd", "configPath", "path", "fs", "json", "config", "repo", "_a", "repoFolder", "r", "import_path", "addRepo", "init_addRepo", "__esmMin", "init_log", "init_git", "init_workspaceConfig", "options", "gitUrl", "folderName", "connection", "connectedTo", "verbose", "repositoriesFolder", "loadWorkspaceConfig", "cwd", "path", "logIfPermitted", "clone", "repoProperties", "tracking", "status", "pull", "checkoutBranch", "checkoutTag", "addRepoToWorkspace", "addRepoCommand_exports", "__export", "builder", "command", "desc", "handler", "addRepoCommand", "options", "defaults", "answers", "prompts", "prev", "values", "prompt", "parts", "fullOptions", "addRepo", "import_prompts", "init_addRepoCommand", "__esmMin", "init_addRepo", "yargs", "argv", "err", "import_path", "createWorkspace", "init_createWorkspace", "__esmMin", "init_log", "init_git", "init_workspaceConfig", "options", "workspaceName", "repositoriesFolder", "pushToGit", "githubAccessToken", "githubProjectName", "githubDefaultBranchName", "githubPrivateRepo", "githubLogin", "verbose", "cwd", "projCwd", "path", "log", "logIfPermitted", "repoUrl", "cloneUrl", "createRepo", "setWorkspaceConfig", "initRepo", "pull", "commitChanges", "pushToRemote", "createCommand_exports", "__export", "builder", "command", "desc", "handler", "createCommand", "options", "verbose", "defaults", "answers", "prompts", "kleur", "prev", "value", "login", "checkAccess", "values", "prompt", "fullOptions", "createWorkspace", "import_prompts", "init_createCommand", "__esmMin", "init_git", "init_createWorkspace", "yargs", "argv", "err", "import_fs", "import_path", "initRepos", "init_initRepos", "__esmMin", "init_git", "init_workspaceConfig", "options", "_a", "cwd", "config", "loadWorkspaceConfig", "repository", "repositoriesFolderPath", "path", "repoPath", "fs", "clone", "switchAndCreateBranchIfNotExists", "pull", "checkoutTag", "initCommand_exports", "__export", "builder", "command", "desc", "handler", "initCommand", "options", "initRepos", "init_initCommand", "__esmMin", "init_initRepos", "yargs", "argv", "err", "import_fs", "import_path", "removeRepo", "init_removeRepo", "__esmMin", "init_log", "init_workspaceConfig", "options", "repoFolder", "verbose", "cwd", "repositoriesFolder", "loadWorkspaceConfig", "logIfPermitted", "folder", "path", "fs", "removeRepoToWorkspace", "removeRepoCommand_exports", "__export", "builder", "command", "desc", "handler", "removeRepoCommand", "options", "_a", "config", "loadWorkspaceConfig", "defaults", "answers", "prompts", "repo", "value", "cwd", "path", "response", "status", "err", "fullOptions", "removeRepo", "import_path", "import_prompts", "init_removeRepoCommand", "__esmMin", "init_removeRepo", "init_workspaceConfig", "init_git", "yargs", "argv", "updateCommand_exports", "__export", "builder", "command", "desc", "handler", "updateCommand", "options", "init_updateCommand", "__esmMin", "yargs", "argv", "err", "packageJson"]
}
